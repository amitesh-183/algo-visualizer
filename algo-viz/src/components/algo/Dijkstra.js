// const graph = {
//     a: { b: 5, c: 2 },
//     b: { a: 5, c: 7, d: 8 },
//     c: { a: 2, b: 7, d: 4, e: 8 },
//     d: { b: 8, c: 4, e: 6, f: 4 },
//     e: { c: 8, d: 6, f: 3 },
//     f: { e: 3, d: 4 },
//   };
var graph =  {
    "0,0": [
        "0,1",
        "1,0",
        "0,1",
        "1,0"
    ],
    "0,1": [
        "0,0",
        "0,0",
        "0,2",
        "1,1",
        "0,2",
        "1,1"
    ],
    "0,2": [
        "0,1",
        "0,1",
        "0,3",
        "1,2",
        "0,3",
        "1,2"
    ],
    "0,3": [
        "0,2",
        "0,2",
        "0,4",
        "1,3",
        "0,4",
        "1,3"
    ],
    "0,4": [
        "0,3",
        "0,3",
        "0,5",
        "1,4",
        "0,5",
        "1,4"
    ],
    "0,5": [
        "0,4",
        "0,4",
        "0,6",
        "1,5",
        "0,6",
        "1,5"
    ],
    "0,6": [
        "0,5",
        "0,5",
        "0,7",
        "1,6",
        "0,7",
        "1,6"
    ],
    "0,7": [
        "0,6",
        "0,6",
        "0,8",
        "1,7",
        "0,8",
        "1,7"
    ],
    "0,8": [
        "0,7",
        "0,7",
        "0,9",
        "1,8",
        "0,9",
        "1,8"
    ],
    "0,9": [
        "0,8",
        "0,8",
        "1,9",
        "1,9"
    ],
    "1,0": [
        "0,0",
        "1,1",
        "0,0",
        "2,0",
        "1,1",
        "2,0"
    ],
    "1,1": [
        "0,1",
        "1,0",
        "1,0",
        "1,2",
        "0,1",
        "2,1",
        "1,2",
        "2,1"
    ],
    "1,2": [
        "0,2",
        "1,1",
        "1,1",
        "1,3",
        "0,2",
        "2,2",
        "1,3",
        "2,2"
    ],
    "1,3": [
        "0,3",
        "1,2",
        "1,2",
        "1,4",
        "0,3",
        "2,3",
        "1,4",
        "2,3"
    ],
    "1,4": [
        "0,4",
        "1,3",
        "1,3",
        "1,5",
        "0,4",
        "2,4",
        "1,5",
        "2,4"
    ],
    "1,5": [
        "0,5",
        "1,4",
        "1,4",
        "1,6",
        "0,5",
        "2,5",
        "1,6",
        "2,5"
    ],
    "1,6": [
        "0,6",
        "1,5",
        "1,5",
        "1,7",
        "0,6",
        "2,6",
        "1,7",
        "2,6"
    ],
    "1,7": [
        "0,7",
        "1,6",
        "1,6",
        "1,8",
        "0,7",
        "2,7",
        "1,8",
        "2,7"
    ],
    "1,8": [
        "0,8",
        "1,7",
        "1,7",
        "1,9",
        "0,8",
        "2,8",
        "1,9",
        "2,8"
    ],
    "1,9": [
        "0,9",
        "1,8",
        "1,8",
        "0,9",
        "2,9",
        "2,9"
    ],
    "2,0": [
        "1,0",
        "2,1",
        "1,0",
        "3,0",
        "2,1",
        "3,0"
    ],
    "2,1": [
        "1,1",
        "2,0",
        "2,0",
        "2,2",
        "1,1",
        "3,1",
        "2,2",
        "3,1"
    ],
    "2,2": [
        "1,2",
        "2,1",
        "2,1",
        "2,3",
        "1,2",
        "3,2",
        "2,3",
        "3,2"
    ],
    "2,3": [
        "1,3",
        "2,2",
        "2,2",
        "2,4",
        "1,3",
        "3,3",
        "2,4",
        "3,3"
    ],
    "2,4": [
        "1,4",
        "2,3",
        "2,3",
        "2,5",
        "1,4",
        "3,4",
        "2,5",
        "3,4"
    ],
    "2,5": [
        "1,5",
        "2,4",
        "2,4",
        "2,6",
        "1,5",
        "3,5",
        "2,6",
        "3,5"
    ],
    "2,6": [
        "1,6",
        "2,5",
        "2,5",
        "2,7",
        "1,6",
        "3,6",
        "2,7",
        "3,6"
    ],
    "2,7": [
        "1,7",
        "2,6",
        "2,6",
        "2,8",
        "1,7",
        "3,7",
        "2,8",
        "3,7"
    ],
    "2,8": [
        "1,8",
        "2,7",
        "2,7",
        "2,9",
        "1,8",
        "3,8",
        "2,9",
        "3,8"
    ],
    "2,9": [
        "1,9",
        "2,8",
        "2,8",
        "1,9",
        "3,9",
        "3,9"
    ],
    "3,0": [
        "2,0",
        "3,1",
        "2,0",
        "4,0",
        "3,1",
        "4,0"
    ],
    "3,1": [
        "2,1",
        "3,0",
        "3,0",
        "3,2",
        "2,1",
        "4,1",
        "3,2",
        "4,1"
    ],
    "3,2": [
        "2,2",
        "3,1",
        "3,1",
        "3,3",
        "2,2",
        "4,2",
        "3,3",
        "4,2"
    ],
    "3,3": [
        "2,3",
        "3,2",
        "3,2",
        "3,4",
        "2,3",
        "4,3",
        "3,4",
        "4,3"
    ],
    "3,4": [
        "2,4",
        "3,3",
        "3,3",
        "3,5",
        "2,4",
        "4,4",
        "3,5",
        "4,4"
    ],
    "3,5": [
        "2,5",
        "3,4",
        "3,4",
        "3,6",
        "2,5",
        "4,5",
        "3,6",
        "4,5"
    ],
    "3,6": [
        "2,6",
        "3,5",
        "3,5",
        "3,7",
        "2,6",
        "4,6",
        "3,7",
        "4,6"
    ],
    "3,7": [
        "2,7",
        "3,6",
        "3,6",
        "3,8",
        "2,7",
        "4,7",
        "3,8",
        "4,7"
    ],
    "3,8": [
        "2,8",
        "3,7",
        "3,7",
        "3,9",
        "2,8",
        "4,8",
        "3,9",
        "4,8"
    ],
    "3,9": [
        "2,9",
        "3,8",
        "3,8",
        "2,9",
        "4,9",
        "4,9"
    ],
    "4,0": [
        "3,0",
        "4,1",
        "3,0",
        "5,0",
        "4,1",
        "5,0"
    ],
    "4,1": [
        "3,1",
        "4,0",
        "4,0",
        "4,2",
        "3,1",
        "5,1",
        "4,2",
        "5,1"
    ],
    "4,2": [
        "3,2",
        "4,1",
        "4,1",
        "4,3",
        "3,2",
        "5,2",
        "4,3",
        "5,2"
    ],
    "4,3": [
        "3,3",
        "4,2",
        "4,2",
        "4,4",
        "3,3",
        "5,3",
        "4,4",
        "5,3"
    ],
    "4,4": [
        "3,4",
        "4,3",
        "4,3",
        "4,5",
        "3,4",
        "5,4",
        "4,5",
        "5,4"
    ],
    "4,5": [
        "3,5",
        "4,4",
        "4,4",
        "4,6",
        "3,5",
        "5,5",
        "4,6",
        "5,5"
    ],
    "4,6": [
        "3,6",
        "4,5",
        "4,5",
        "4,7",
        "3,6",
        "5,6",
        "4,7",
        "5,6"
    ],
    "4,7": [
        "3,7",
        "4,6",
        "4,6",
        "4,8",
        "3,7",
        "5,7",
        "4,8",
        "5,7"
    ],
    "4,8": [
        "3,8",
        "4,7",
        "4,7",
        "4,9",
        "3,8",
        "5,8",
        "4,9",
        "5,8"
    ],
    "4,9": [
        "3,9",
        "4,8",
        "4,8",
        "3,9",
        "5,9",
        "5,9"
    ],
    "5,0": [
        "4,0",
        "5,1",
        "4,0",
        "6,0",
        "5,1",
        "6,0"
    ],
    "5,1": [
        "4,1",
        "5,0",
        "5,0",
        "5,2",
        "4,1",
        "6,1",
        "5,2",
        "6,1"
    ],
    "5,2": [
        "4,2",
        "5,1",
        "5,1",
        "5,3",
        "4,2",
        "6,2",
        "5,3",
        "6,2"
    ],
    "5,3": [
        "4,3",
        "5,2",
        "5,2",
        "5,4",
        "4,3",
        "6,3",
        "5,4",
        "6,3"
    ],
    "5,4": [
        "4,4",
        "5,3",
        "5,3",
        "5,5",
        "4,4",
        "6,4",
        "5,5",
        "6,4"
    ],
    "5,5": [
        "4,5",
        "5,4",
        "5,4",
        "5,6",
        "4,5",
        "6,5",
        "5,6",
        "6,5"
    ],
    "5,6": [
        "4,6",
        "5,5",
        "5,5",
        "5,7",
        "4,6",
        "6,6",
        "5,7",
        "6,6"
    ],
    "5,7": [
        "4,7",
        "5,6",
        "5,6",
        "5,8",
        "4,7",
        "6,7",
        "5,8",
        "6,7"
    ],
    "5,8": [
        "4,8",
        "5,7",
        "5,7",
        "5,9",
        "4,8",
        "6,8",
        "5,9",
        "6,8"
    ],
    "5,9": [
        "4,9",
        "5,8",
        "5,8",
        "4,9",
        "6,9",
        "6,9"
    ],
    "6,0": [
        "5,0",
        "6,1",
        "5,0",
        "7,0",
        "6,1",
        "7,0"
    ],
    "6,1": [
        "5,1",
        "6,0",
        "6,0",
        "6,2",
        "5,1",
        "7,1",
        "6,2",
        "7,1"
    ],
    "6,2": [
        "5,2",
        "6,1",
        "6,1",
        "6,3",
        "5,2",
        "7,2",
        "6,3",
        "7,2"
    ],
    "6,3": [
        "5,3",
        "6,2",
        "6,2",
        "6,4",
        "5,3",
        "7,3",
        "6,4",
        "7,3"
    ],
    "6,4": [
        "5,4",
        "6,3",
        "6,3",
        "6,5",
        "5,4",
        "7,4",
        "6,5",
        "7,4"
    ],
    "6,5": [
        "5,5",
        "6,4",
        "6,4",
        "6,6",
        "5,5",
        "7,5",
        "6,6",
        "7,5"
    ],
    "6,6": [
        "5,6",
        "6,5",
        "6,5",
        "6,7",
        "5,6",
        "7,6",
        "6,7",
        "7,6"
    ],
    "6,7": [
        "5,7",
        "6,6",
        "6,6",
        "6,8",
        "5,7",
        "7,7",
        "6,8",
        "7,7"
    ],
    "6,8": [
        "5,8",
        "6,7",
        "6,7",
        "6,9",
        "5,8",
        "7,8",
        "6,9",
        "7,8"
    ],
    "6,9": [
        "5,9",
        "6,8",
        "6,8",
        "5,9",
        "7,9",
        "7,9"
    ],
    "7,0": [
        "6,0",
        "7,1",
        "6,0",
        "8,0",
        "7,1",
        "8,0"
    ],
    "7,1": [
        "6,1",
        "7,0",
        "7,0",
        "7,2",
        "6,1",
        "8,1",
        "7,2",
        "8,1"
    ],
    "7,2": [
        "6,2",
        "7,1",
        "7,1",
        "7,3",
        "6,2",
        "8,2",
        "7,3",
        "8,2"
    ],
    "7,3": [
        "6,3",
        "7,2",
        "7,2",
        "7,4",
        "6,3",
        "8,3",
        "7,4",
        "8,3"
    ],
    "7,4": [
        "6,4",
        "7,3",
        "7,3",
        "7,5",
        "6,4",
        "8,4",
        "7,5",
        "8,4"
    ],
    "7,5": [
        "6,5",
        "7,4",
        "7,4",
        "7,6",
        "6,5",
        "8,5",
        "7,6",
        "8,5"
    ],
    "7,6": [
        "6,6",
        "7,5",
        "7,5",
        "7,7",
        "6,6",
        "8,6",
        "7,7",
        "8,6"
    ],
    "7,7": [
        "6,7",
        "7,6",
        "7,6",
        "7,8",
        "6,7",
        "8,7",
        "7,8",
        "8,7"
    ],
    "7,8": [
        "6,8",
        "7,7",
        "7,7",
        "7,9",
        "6,8",
        "8,8",
        "7,9",
        "8,8"
    ],
    "7,9": [
        "6,9",
        "7,8",
        "7,8",
        "6,9",
        "8,9",
        "8,9"
    ],
    "8,0": [
        "7,0",
        "8,1",
        "7,0",
        "9,0",
        "8,1",
        "9,0"
    ],
    "8,1": [
        "7,1",
        "8,0",
        "8,0",
        "8,2",
        "7,1",
        "9,1",
        "8,2",
        "9,1"
    ],
    "8,2": [
        "7,2",
        "8,1",
        "8,1",
        "8,3",
        "7,2",
        "9,2",
        "8,3",
        "9,2"
    ],
    "8,3": [
        "7,3",
        "8,2",
        "8,2",
        "8,4",
        "7,3",
        "9,3",
        "8,4",
        "9,3"
    ],
    "8,4": [
        "7,4",
        "8,3",
        "8,3",
        "8,5",
        "7,4",
        "9,4",
        "8,5",
        "9,4"
    ],
    "8,5": [
        "7,5",
        "8,4",
        "8,4",
        "8,6",
        "7,5",
        "9,5",
        "8,6",
        "9,5"
    ],
    "8,6": [
        "7,6",
        "8,5",
        "8,5",
        "8,7",
        "7,6",
        "9,6",
        "8,7",
        "9,6"
    ],
    "8,7": [
        "7,7",
        "8,6",
        "8,6",
        "8,8",
        "7,7",
        "9,7",
        "8,8",
        "9,7"
    ],
    "8,8": [
        "7,8",
        "8,7",
        "8,7",
        "8,9",
        "7,8",
        "9,8",
        "8,9",
        "9,8"
    ],
    "8,9": [
        "7,9",
        "8,8",
        "8,8",
        "7,9",
        "9,9",
        "9,9"
    ],
    "9,0": [
        "8,0",
        "9,1",
        "8,0",
        "9,1"
    ],
    "9,1": [
        "8,1",
        "9,0",
        "9,0",
        "9,2",
        "8,1",
        "9,2"
    ],
    "9,2": [
        "8,2",
        "9,1",
        "9,1",
        "9,3",
        "8,2",
        "9,3"
    ],
    "9,3": [
        "8,3",
        "9,2",
        "9,2",
        "9,4",
        "8,3",
        "9,4"
    ],
    "9,4": [
        "8,4",
        "9,3",
        "9,3",
        "9,5",
        "8,4",
        "9,5"
    ],
    "9,5": [
        "8,5",
        "9,4",
        "9,4",
        "9,6",
        "8,5",
        "9,6"
    ],
    "9,6": [
        "8,6",
        "9,5",
        "9,5",
        "9,7",
        "8,6",
        "9,7"
    ],
    "9,7": [
        "8,7",
        "9,6",
        "9,6",
        "9,8",
        "8,7",
        "9,8"
    ],
    "9,8": [
        "8,8",
        "9,7",
        "9,7",
        "9,9",
        "8,8",
        "9,9"
    ],
    "9,9": [
        "8,9",
        "9,8",
        "9,8",
        "8,9"
    ]
}
// JavaScript code for printing shortest path between
// two vertices of unweighted graph
const max_value = 9007199254740992;

// utility function to form edge between two vertices
// source and dest
function add_edge(adj, src, dest){
	adj[src].push(dest);
	adj[dest].push(src);
}

// a modified version of BFS that stores predecessor
// of each vertex in array p
// and its distance from source in array d
function BFS(adj, src, dest, v, pred, dist)
{
	// a queue to maintain queue of vertices whose
	// adjacency list is to be scanned as per normal
	// DFS algorithm
	let queue = [];

	// boolean array visited[] which stores the
	// information whether ith vertex is reached
	// at least once in the Breadth first search
	let visited = new Array(v);

	// initially all vertices are unvisited
	// so v[i] for all i is false
	// and as no path is yet constructed
	// dist[i] for all i set to infinity
	for (let i = 0; i < v; i++) {
		visited[i] = false;
		dist[i] = max_value;
		pred[i] = -1;
	}

	// now source is first to be visited and
	// distance from source to itself should be 0
	visited[src] = true;
	dist[src] = 0;
	queue.push(src);

	// standard BFS algorithm
	while (queue.length > 0) {
		let u = queue[0];
		queue.shift();
		for (let i = 0; i < adj[u].length; i++) {
			if (visited[adj[u][i]] == false) {
				visited[adj[u][i]] = true;
				dist[adj[u][i]] = dist[u] + 1;
				pred[adj[u][i]] = u;
				queue.push(adj[u][i]);

				// We stop BFS when we find
				// destination.
				if (adj[u][i] == dest)
					return true;
			}
		}
	}

	return false;
}

// utility function to print the shortest distance
// between source vertex and destination vertex
function printShortestDistance(adj, s, dest, v)
{
	// predecessor[i] array stores predecessor of
	// i and distance array stores distance of i
	// from s
	let pred = new Array(v).fill(0);
	let dist = new Array(v).fill(0);

	if (BFS(adj, s, dest, v, pred, dist) == false) {
		console.log("Given source and destination are not connected");
	}

	// vector path stores the shortest path
	let path = new Array();
	let crawl = dest;
	path.push(crawl);
	while (pred[crawl] != -1) {
		path.push(pred[crawl]);
		crawl = pred[crawl];
	}

	// distance from source is in distance array
	console.log("Shortest path length is : ", dist[dest]);


	// printing path from source to destination
	console.log("Path is::");

	for (let i = path.length - 1; i >= 0; i--)
		console.log(path[i]);
}

// Driver program to test above functions
// no. of vertices
let v = 8;

// array of vectors is used to store the graph
// in the form of an adjacency list
let adj = new Array(v).fill(0);

for(let i = 0; i < v; i++){
	adj[i] = new Array();
}

// Creating graph given in the above diagram.
// add_edge function takes adjacency list, source
// and destination vertex as argument and forms
// an edge between them.
add_edge(adj, 0, 1);
add_edge(adj, 0, 3);
add_edge(adj, 1, 2);
add_edge(adj, 3, 4);
add_edge(adj, 3, 7);
add_edge(adj, 4, 5);
add_edge(adj, 4, 6);
add_edge(adj, 4, 7);
add_edge(adj, 5, 6);
add_edge(adj, 6, 7);
let source = 0;
let dest = 7;
printShortestDistance(adj, source, dest, v);

